// Code generated by go-bindata.
// sources:
// attachment.go
// attachment_test.go
// bindata.go
// mail.go
// mail_test.go
// responsive.html
// DO NOT EDIT!

package mail

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _attachmentGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x91\xcd\x6a\xeb\x30\x10\x85\xd7\xd2\x53\xcc\xf5\xca\x06\x63\xed\x2f\x64\x71\xc9\xed\x0f\xa5\x2d\x81\x2e\xba\x08\x59\x28\xce\xd8\x1e\x62\x49\xae\x32\x2e\x0d\x25\xef\xde\x51\xed\xa4\x74\xdd\x6e\xc4\xe8\xe7\x3b\xe7\x8c\x66\xb0\xf5\xde\xb6\x08\xce\x52\xaf\x35\xb9\x21\x44\x86\x5c\xab\x8c\x82\xa1\x30\x32\xf5\x99\x6c\xc2\x21\xad\x83\xe5\xce\x34\xd4\x63\x2a\x32\x2d\x27\x2d\x71\x37\x6e\xab\x3a\x38\xf3\x36\xbe\x90\x6f\x1b\xf4\xad\x49\x5a\xce\x7a\x33\xd1\x85\xd6\xcd\xe8\x6b\x78\xb2\xaf\xf8\x8f\xd9\xd6\x9d\x43\xcf\x79\xd2\x59\x06\xcf\x52\xc3\x7a\xb3\x3d\x32\x96\xc0\x61\x8f\xbe\x84\x74\xf5\x68\x1d\xc2\x81\xa3\x68\x16\x80\x31\x86\x08\xef\xe2\xd8\x05\x87\xff\x29\xc2\xdf\x05\x24\xf5\xea\x06\xf9\x76\x3a\xca\x0b\xad\x76\x14\x57\x12\x2d\xdd\x9e\x63\x56\x77\x81\x7c\x3e\x63\xe5\x04\x89\x6d\x43\x6d\x7a\xb9\xce\xd8\x0d\xa9\xc8\x36\xb3\xbb\xa8\x18\x03\x0f\x61\x87\x2b\x8c\x4e\x2b\xb1\xbe\x98\x2d\x23\x5a\x4e\x3a\x58\x73\x88\xc7\x7c\xb6\x2b\x21\x1c\xaa\x33\x21\x3c\x35\x29\x30\xfc\x59\x80\xa7\x5e\x52\x2b\xf5\x49\x5f\x4b\xa2\xfb\xd0\x56\x57\xa9\x99\x5c\x5e\xcc\x55\x21\x88\x8a\xc8\x63\xf4\x89\xd3\xea\xa4\x95\xbd\xfc\xd3\x4f\xfb\xf9\xfa\xcd\x62\x6a\x66\x01\xd3\x58\xab\xe7\x48\x8c\x29\x54\xfe\xdd\x6d\x22\xe6\xd1\xfc\x7e\x6f\xfa\xbc\x17\x01\x7d\xd2\x1f\x01\x00\x00\xff\xff\x4d\x45\xaa\xd8\x80\x02\x00\x00")

func attachmentGoBytes() ([]byte, error) {
	return bindataRead(
		_attachmentGo,
		"attachment.go",
	)
}

func attachmentGo() (*asset, error) {
	bytes, err := attachmentGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "attachment.go", size: 640, mode: os.FileMode(420), modTime: time.Unix(1479088553, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _attachment_testGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\x41\x4b\xc4\x30\x10\x85\xcf\xcd\xaf\x18\x03\x42\x2a\xa5\xf5\xac\xf4\x20\x2a\x8a\x07\x11\x76\x6f\xcb\x22\xd9\x92\xb4\x61\x9b\xa4\xb6\xd3\x45\x91\xfd\xef\xce\xb4\xbb\xa2\x0b\x9e\x84\x52\x26\x93\xf9\xde\x7b\x99\x4e\x57\x5b\x5d\x1b\xf0\xda\xb5\x42\x38\xdf\xc5\x1e\x41\x89\x44\xc6\x41\xd2\xbf\xd3\xd8\x14\xd6\xb5\x86\x0b\x6e\xa0\x19\xd0\x85\x5a\x0a\xaa\x6b\x87\xcd\xb8\xc9\xab\xe8\x8b\xf7\xf1\x8d\xba\xd6\x84\xba\x60\x25\xaf\x43\x31\xa2\x6b\xa5\x48\x85\xb0\x63\xa8\x60\x49\xdc\x42\xef\xcc\x0d\xa2\xae\x1a\x6f\x02\x2a\x84\x8b\x83\x5a\xbe\x4c\xe1\x93\x14\xd9\xe8\x36\x06\xa4\x5b\xb8\x2a\x61\xb5\xde\x7c\xa0\x51\x12\x1b\x37\x00\x7d\xd5\x7c\x25\x53\x91\x60\xdc\x9a\xc0\x33\xf2\x52\xce\xdc\xb3\xf6\x66\x6a\xb0\x26\xc7\x33\x7d\xcf\xe7\x13\xd3\x1f\x16\x19\x4c\x2a\x19\x1c\x71\xd2\x75\x16\x98\x3b\x2b\x21\xb8\x96\x32\x25\x09\xe6\xf7\x7d\x1f\x7b\xab\xe4\x89\x52\x0a\x96\x5e\x0a\xe7\x3b\x99\x31\x43\xf0\x9e\x5c\x9b\xe8\xcd\x9d\x9b\x9c\x79\x01\xf9\x83\xc1\xc7\xb9\xa5\x68\x42\x7f\xe3\x2f\xb4\x4f\x1e\x3a\xee\x36\x7f\x8a\x2e\xa8\x03\x9d\xcd\x2c\xe5\xb4\xae\xe6\xc9\x95\x44\xdf\x71\x21\xd7\x7f\xa4\x7e\x9d\x42\x40\x09\x71\xc8\x17\xa8\x51\xfd\xb6\x4a\xaf\xff\xf5\xae\xbd\xf8\x0a\x00\x00\xff\xff\x66\x4e\xe2\x59\x28\x02\x00\x00")

func attachment_testGoBytes() ([]byte, error) {
	return bindataRead(
		_attachment_testGo,
		"attachment_test.go",
	)
}

func attachment_testGo() (*asset, error) {
	bytes, err := attachment_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "attachment_test.go", size: 552, mode: os.FileMode(420), modTime: time.Unix(1464849719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5b\x6f\xdb\xc8\x15\x80\x9f\xcd\x5f\x31\x6b\x60\x17\x52\xe1\xca\xbc\x5f\x04\xe4\x65\x93\xb4\xc8\x43\xb3\x40\x9b\x3e\x55\x45\x30\x24\x87\x0e\x51\x49\x74\x25\x3a\x95\x13\xe4\xbf\xf7\x7c\x73\x46\x5e\x39\xdd\x34\x40\x51\x03\x32\x67\xce\x9c\xfb\xfd\xf6\xd6\xbc\x9c\x7a\x67\xee\xdc\xde\x1d\xec\xec\x7a\xd3\x3e\x9a\xbb\xe9\xf7\xed\xb8\xef\xed\x6c\x57\x91\x20\x1c\xa7\x87\x43\xe7\x8e\x6b\xce\x76\x9e\x6d\xf7\x61\xe7\xf6\xf3\xea\x6e\x7a\x0e\x78\x3f\xbb\xe3\x19\x7a\x26\xd7\xdb\xce\x8e\xdb\x8b\xe3\x25\xe2\xc1\x1d\xef\xa7\xfd\x71\xfc\xe8\x56\x1f\xe6\xdd\x16\xd0\xab\x5f\xcc\xdb\x5f\xde\x99\xd7\xaf\xde\xbc\xfb\x21\x8a\xee\x6d\xf7\x0f\x7b\xe7\x20\xdc\x47\xd1\xb8\xbb\x9f\x0e\xb3\x59\x44\x57\xd7\xed\xa3\xb0\xb9\x96\x43\x37\xed\xee\x85\xcd\xf1\xf6\xee\xd3\x78\x0f\x60\xd8\xcd\x7c\xc6\x49\xff\xdf\x8e\xd3\xc3\x3c\x6e\xb9\x4c\x9e\xe0\xde\xce\x1f\x6e\x87\x71\xeb\x38\x00\x38\xce\x87\x71\x7f\xe7\xdf\xe6\x71\xe7\xae\xa3\x65\x14\x0d\x0f\xfb\xee\x6c\xc6\x9f\x9d\xed\x17\x1c\xcc\xdf\xfe\x8e\xd8\x1b\xb3\xb7\x3b\x67\x94\x6c\x69\x16\x67\xa8\x3b\x1c\xa6\xc3\xd2\x7c\x8e\xae\xee\x3e\xf9\x9b\x59\xbf\x30\x68\xb5\x7a\xeb\xfe\x05\x13\x77\x58\x78\xb5\xb9\xff\xfc\x30\x0c\x72\x87\xed\x72\x19\x5d\x8d\x83\x27\xf8\xe1\x85\xd9\x8f\x5b\x58\x5c\x1d\xdc\xfc\x70\xd8\x73\xbd\x31\x62\xd2\xea\x35\xdc\x87\xc5\x35\x8c\xcc\x8f\xff\x5c\x9b\x1f\x3f\x5e\xab\x26\x5e\x96\xf0\xf8\x12\x45\x57\x1f\xed\xc1\xb4\x0f\x83\x51\x39\x2a\x24\xba\x7a\xaf\xea\xbc\x30\xe3\xb4\x7a\x39\xdd\x3f\x2e\x7e\x12\x9c\x1b\xd1\x4d\xa8\xba\xed\xeb\xb3\xa6\xab\x97\xdb\xe9\xe8\x16\x62\xfe\xff\x49\x1f\xd8\x28\xff\x6f\x30\x12\x44\xd5\x3b\x00\x45\xad\xd5\xcf\xa8\xbe\x58\xde\x80\x11\xc9\xdb\xfc\x78\xef\x8c\x3d\x1e\xdd\x8c\xcb\x1f\xba\x19\x2e\xde\xbe\x10\x0f\x11\xb3\x1f\x26\x63\xa6\xe3\xea\x0f\x12\xd6\x37\x72\x79\xa2\x0b\x21\x3c\xc3\x2f\x38\xf8\x18\xca\x9f\x86\x31\xba\x3a\x8e\x9f\xfc\x7d\xdc\xcf\x65\x1e\x5d\xed\x28\x0b\xf3\xc4\xf4\x4f\x72\xf5\xc0\x77\x92\x21\x86\x34\x59\x71\x42\x8e\x4f\x95\xc5\x30\x7e\x2d\x6b\x69\xde\x8a\x88\xc5\x32\x48\x40\x66\xb0\x72\x18\x57\x48\x17\xe2\x6f\xd3\xfe\x45\xd4\x11\x5a\xaf\xcd\x73\x52\x14\xfd\xaf\xa4\xe8\x2a\xa4\x17\x9a\x3f\x67\x80\x69\xdf\x63\x80\x71\xc2\xe3\xc9\xd0\xff\xe0\x10\xac\xff\x36\x93\x37\xc7\x57\xe3\x41\x58\xb4\xd3\xb4\xbd\xa4\xb6\xdb\xe3\x77\x2c\x7f\x3c\xaa\xe1\xee\x30\xd8\xce\x7d\xfe\x72\x41\x1d\x52\x82\x2c\x7f\xff\x6b\xeb\xf9\xe3\x24\xa9\xad\xb9\xb0\xb8\xde\x9c\x92\x61\x73\xaa\xdb\xcd\x29\xae\xe5\x17\x87\x5f\xb3\x39\x95\x4e\xe0\x01\x36\x08\x8e\xed\x36\xa7\x26\xd9\x9c\xba\x5e\xde\xec\xe6\xe4\x84\x26\x93\xb7\x44\x7e\x75\xb1\x39\xf5\x95\xfc\xd2\xcd\xa9\xc8\x04\x47\x70\x07\x81\x75\x82\x17\x97\x82\x2f\x30\x27\x74\xa9\xf0\x29\xf3\xcd\xa9\x82\x4f\xa3\xb0\x18\xde\x82\x9b\xca\xb9\x16\x78\x2a\x72\x5b\xab\xfa\x14\x82\x93\xca\xb7\x13\x58\x2f\xdf\x44\xbe\xa5\xc8\xc8\x05\x6e\xe5\x9c\xa5\x8a\x1f\xc3\x5b\x78\x38\xe1\xd5\xcb\xbd\x48\x94\xb7\x45\x96\xfc\xfa\x5e\xed\xe9\xe4\xec\x84\x8f\x13\x5d\xb3\x56\xbf\xb5\xe8\x5a\x8a\x8e\x6d\xac\x3a\x43\xdf\x96\x2a\x1f\xb9\x85\xc8\xb0\xc2\x37\x93\xb7\x16\x7d\x84\x77\x2e\x7c\x6a\xc1\x29\x84\xd6\xb6\xca\xa3\x06\x2f\x51\x9f\xa0\x17\xbc\x1a\xfc\x28\x6f\x5d\xaa\x74\x16\x1b\xf1\x45\xa1\xbc\x33\x74\xcb\xd5\x3f\xa9\x0d\xf6\x60\x4b\xa5\x5f\xfc\x94\x55\xaa\x3b\x72\x32\x70\x44\xaf\x41\xf0\x33\x74\x16\x78\x23\xf2\x4a\xd1\x2f\x91\xf7\x21\x57\x19\xf8\xa7\xb0\x2a\xa3\x82\x46\xf0\xfb\x24\xc4\xa9\xd4\x18\xe2\x87\x52\x68\x2a\xf9\xb6\xc1\xc6\x41\xce\x35\x3e\x6c\x14\xaf\x81\x17\xf1\x14\x58\xd5\x84\xf8\x36\x1a\x53\x60\xf8\xa6\xcb\x54\x46\x8b\x4e\xbd\xda\xd0\xf0\x8e\x5e\x89\xf2\x43\xcf\x3a\xc4\x02\xbf\x94\xc4\xb2\x57\xbf\x10\x73\x9b\x05\x98\xd0\xd5\xf8\x2f\x51\xff\x12\x03\x62\xea\x52\x8d\x7f\x2c\xb4\x75\xa5\xf9\x98\x36\x4a\xdf\x0f\x0a\x4f\x03\x6f\x17\x72\x6e\x90\xf7\xaa\x54\x9f\xf9\x3c\x6c\xd5\x37\xc0\x12\xc1\x2d\x84\x4f\x12\xfc\x4d\x7e\x34\x4e\xe3\x50\xc8\x7b\x55\xa9\x5e\x95\xc4\x2e\x0b\x70\x62\x16\x13\x77\x62\x1a\xfc\xc2\xd7\xdb\xde\xfc\x9a\xa3\xe4\xa2\xe5\x5e\x87\x18\x09\x5e\x8b\x6c\xec\xe3\x3d\xd3\x9c\xf7\xbe\x21\xce\x21\x7f\x72\xa7\xe7\x36\x09\x71\xad\x43\x2e\x64\x1a\x4b\xde\xb1\xa5\x10\x78\x95\x69\x6d\x76\x95\xea\x48\xbe\x42\x4b\x8e\x25\xe4\x64\x88\x39\xf7\xac\xd3\xdc\xc5\x5f\xe4\xe6\xd0\x69\x0c\xf1\xb3\x15\xfa\x22\xe4\x38\xf4\xf8\xcf\xe7\x8e\xe8\x97\xa3\x33\x79\x2c\xdf\x3e\x56\xbf\xe0\x33\x6c\x23\xaf\xc9\x7d\x68\xa9\xf5\xa2\x50\x59\xe8\x54\x5b\xb5\x1d\x9f\x0d\xc1\x5f\x7d\xa6\x71\xa1\x1e\x1b\xea\xa8\x57\x3d\x80\xe7\x83\xca\x20\x5e\x83\x0d\xfd\x25\xd5\x1e\x43\x5d\xc6\x89\xe2\x61\xb7\x0d\x35\x9b\xd7\xea\x33\x6c\x2a\x88\xbb\x0b\x35\x8e\xbf\x84\xd6\x95\x9a\xef\xc8\xa8\x9c\xd6\x07\xbc\x5b\xb9\x27\x95\xf2\xac\x7a\xcd\x67\xfa\x1f\xf7\x73\xef\x23\xb7\xf8\xe5\xc4\xb8\x50\x5f\x12\x57\xfc\x15\xa7\x67\xbc\xeb\xf3\xd6\x73\xd9\x57\xc3\x2c\xfe\xad\x1d\xe7\x3c\xb1\x2f\x76\x24\x19\xee\xcf\xba\xf2\x8d\x00\xae\x9f\xad\x8c\xd7\x02\x5a\x3e\x0d\xcd\x4b\x5c\x84\xfc\xce\x4f\xf9\x4b\x21\x7e\xcc\x3f\xed\x52\xbf\xa1\xd9\xf7\x36\x95\xa7\x05\xc3\xaf\x08\xc2\xe3\xab\x71\xf3\x99\x41\xbc\x36\x5f\x6b\x69\x18\xb2\x6b\x53\xe6\xf1\x8d\x61\x5c\xae\x2f\xa7\xe9\x22\x4f\xe3\xa5\x87\x33\x04\xd7\x3a\x24\xff\xba\x1f\x4f\x8b\x24\xaf\x9a\xb8\xae\x8b\x22\xbb\x31\xf1\x52\xf6\x1f\x8b\xc8\x9f\xbc\x59\x9f\xbd\x2d\x6b\x13\x4c\x42\x9f\xb5\xff\xff\xe5\xc9\x97\xf6\xe6\x1b\x03\xce\xaf\xcc\xff\xeb\x94\xcb\xb5\xa3\xe6\x89\x56\x00\x13\xe3\x72\xca\xd1\xf5\xc8\x50\xba\xe5\xb9\x9a\xf3\x54\xbb\x37\x53\x8c\x0a\x62\x52\x92\xf9\x69\xac\x70\x2a\x22\xa6\xdb\x24\xda\x7d\xc8\xc6\xae\xd5\x4c\xa5\xd3\x36\xf2\x6d\x73\xed\x08\x4d\xab\x3a\x50\xd1\xbe\x3a\x0a\x9d\xba\x43\xaf\x9d\x90\x2e\x03\x6e\x1b\xaa\x93\xae\xd6\x84\xee\xea\xab\x98\xae\x9d\x69\x35\x31\xc9\xaa\x56\xab\x95\xee\x41\xf5\x16\x72\x2f\xfa\x30\x2d\x44\xbf\x9e\xaa\x28\xd4\x06\x26\x0b\xdd\xb4\x2b\x74\xd2\xe2\x03\xaa\x97\x69\xd7\x95\x7a\xa7\x62\xda\x41\x75\xf3\x13\x39\xd7\x49\x01\x0f\xdf\xb1\xdb\x30\xad\xf0\x59\xa3\x9d\x03\xbf\xd1\xc1\x62\xab\xd5\xc4\xd4\xa1\xf3\xe1\xc7\xb6\xd6\x4d\xc0\x57\x76\xad\x31\x1a\xe8\xf0\xc8\xee\x75\x13\x80\x3f\xf6\x71\x2e\x63\x9d\xf4\xf8\x9f\x0e\xcc\xa4\xc0\x0f\xf0\xc4\xff\xbe\x33\x14\x3a\xcd\xe9\x40\x74\x5d\x68\xe8\x6a\x7d\xa7\x76\x7a\x3f\x76\xa1\x53\xa7\xba\x49\x24\x56\xe3\x12\x87\x58\x22\x0f\x5d\xea\xd0\x7d\xe9\xc8\xb9\xd0\xb8\x44\xfd\xeb\xed\x6e\x54\x67\xba\x3c\x13\x87\xb8\xe1\x5f\x6c\x82\x07\xf1\x6c\xc3\x46\x41\x97\xc6\x27\x6c\x26\x4c\x1d\xfc\xcf\x64\x27\xef\x7c\x27\x2a\x14\x07\xdb\xd8\xa0\x88\x39\x7a\xa3\x73\x63\x75\x9a\xd2\xd1\x87\x34\x4c\x5d\xa7\x6f\x4c\x97\xa1\xd4\x4e\x49\xc7\xc4\x6e\x72\x80\xc9\x00\x3e\xbc\xc9\x59\xba\x66\x92\x69\xdc\xa8\x05\x26\x2d\xf1\xc1\x26\x74\xe5\xcc\xe4\xa8\x42\x8c\xab\x42\x71\x98\x42\x6c\x4a\xe7\xe9\x82\x6d\x4c\x77\xbf\xa9\x14\x5a\x43\x74\x5b\x62\x86\x2c\x78\x93\x73\x3e\x9e\xa1\xfb\xa3\x2f\xb1\x87\x8e\x89\xc1\xf9\xbc\x81\x91\x9b\xc4\x90\x58\x92\x8f\xe4\x32\x93\xa5\x09\xf9\x40\x8e\xb0\x85\x70\x6f\x3a\xdd\x42\xe8\xd6\xe4\x37\xb1\xe9\x12\xb5\x95\x09\x6c\xc3\x66\x41\x8c\x2b\x6c\xce\x74\xe3\xa4\x5e\x98\x32\x49\x98\xa0\xce\x69\xcc\xc0\xa1\x36\xd9\x20\x6d\xa8\x65\x64\x21\x33\xed\x74\xe2\x43\x4b\x7e\x60\x63\xf7\xef\x00\x00\x00\xff\xff\x3c\xbe\xc2\x25\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1493969672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mailGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x82\xd5\xa1\x90\x50\x87\x6a\x7b\x4c\x91\x02\x5e\xef\xa6\x1f\x58\x2f\x0c\xd8\x40\x0b\x04\x41\x43\x4b\x94\xad\xb5\x48\xaa\x24\xe5\xc4\x08\xf2\xdf\x3b\x43\x51\x96\x64\x7b\xe1\xd4\x17\x53\xd4\xe3\xe3\xe3\xbc\x99\xa1\x6a\x96\xed\xd8\x86\x13\xc1\xca\x2a\x0c\x4b\x51\x2b\x6d\x49\x1c\x06\xd1\xfa\x60\xb9\x89\x60\x50\x33\xbb\x4d\x8b\xb2\xe2\x38\xc0\x09\x63\x75\xa6\xe4\x1e\x87\x96\xbf\xd8\xd4\x72\x51\x57\xcc\xf2\x28\x84\x99\x4d\x69\xb7\xcd\x9a\x66\x4a\xa4\xba\x31\x46\x2b\x63\xd2\x75\x05\x9b\x14\xba\xcc\xd9\x21\x1a\x43\x5e\x9a\x7f\x4b\xb9\x29\xb8\xdc\xa4\x28\x40\x30\x99\xb2\x2c\x53\x8d\xb4\xd7\x81\xa0\xc1\xb2\xcc\x9a\xeb\x48\x23\x6c\x7d\x1d\xd5\xd8\xb2\x72\x28\x55\xef\x36\xb4\x94\xe9\x46\xe1\x2b\xba\xff\x39\x0a\x93\x30\xb4\x87\x9a\x93\x39\x4c\x10\x38\x7f\x93\x59\xf2\x1a\x06\xcb\x66\xfd\x95\xc3\x70\xf8\x83\xb7\xc0\x0c\x83\xa7\xaf\x46\xc9\xdb\xc8\xb4\x98\xe8\x29\x0c\x56\x8a\x9c\xfd\x1e\x1e\xfd\x02\x0f\xb7\x0a\x91\xb3\xec\x3a\x32\xcb\x10\x79\xaf\x95\x38\x45\x9e\x4a\x28\x00\x83\xd8\x85\x2e\x95\x2e\xed\x61\x88\x5d\x2b\x55\xb9\x81\xc7\xd6\x1e\x83\xf8\x0f\x2a\x3f\x5c\xe3\x5e\x03\xa6\x3d\xdb\x8e\xcb\x2b\x58\x8b\x18\x04\x4f\x2d\x38\xb7\x15\x5c\xda\x7b\xc8\xab\x2f\x4c\x70\x73\x76\x3c\x76\x8e\x81\xa5\x6f\x61\x58\x34\x32\x23\x4b\x2e\x73\x34\x23\x46\x8b\x9c\x2d\x09\xe1\x5a\x2b\x0d\xb6\x84\x81\xcf\xa1\x09\x4e\x91\xdb\x3b\xe2\x9f\xe9\x6f\xdc\x4e\xdb\xe1\x1f\xb2\x50\x6e\x2d\xc5\x00\x26\x61\x50\x16\x0e\xfc\xdd\x1d\x91\x40\x08\xde\x06\x9a\xdb\x46\x4b\x9c\x0d\x83\x37\xf0\x7a\xbe\x5a\x2c\xb9\xde\x73\x7d\xa4\xc5\xbc\x42\xce\xfe\xd5\xff\xa3\x14\x48\xe2\xb3\xec\x0b\x7f\x9e\x73\x63\xa0\x14\x63\x58\x2a\xe8\x92\xdb\xdf\x39\xcb\x81\x32\xf2\x59\x16\x4d\x5c\x91\x52\xff\x08\x29\x19\xec\x99\x26\x5d\x19\xcc\x59\x4d\xee\x00\xb1\xe3\x20\xa2\x7e\x68\x83\xe9\x63\x0a\x8c\x1d\xec\x73\x69\xfa\xb8\x74\x93\x78\x88\x99\x1f\xc7\xef\x51\x5e\x40\xa0\xff\x99\x90\x3d\x92\x68\x26\xa1\x7f\x0c\xf9\xdd\x8a\x81\xae\x87\x3d\xfd\x84\xd2\x1f\x41\xe0\x9e\xa2\x95\x48\xd2\xca\xb7\x6a\x59\x95\x19\x3f\xda\x7f\x89\xdb\x1d\x1b\x8a\x07\x69\x3b\x3c\x98\x5a\xd7\x90\x04\xb1\x9f\x80\xe0\xd0\x7b\xa5\x05\xb3\xd3\x3c\xd7\x10\xc9\x78\x3f\x21\x23\x0d\x8f\x49\xd2\x46\x7d\x18\xdb\x95\x82\xb0\x7a\x0a\x4a\x29\x06\x15\x0e\x5f\x71\xd9\x3a\x39\xcb\x12\xf2\x2b\xf9\xd1\xed\xec\x82\x9d\x9d\xaa\xfd\x96\x5c\xa8\x60\x5c\x14\x74\x2b\x8e\x7a\xfd\xc4\x3b\xf5\xa2\xe0\xb1\xe2\x59\x06\x8a\x3d\x89\x53\xec\x42\x39\x82\x60\xfe\x45\xe7\x1b\x74\x55\xe0\xbc\x18\x6f\x36\x7a\x85\x1b\x87\x41\x9a\x92\xae\x17\xb8\x98\xb8\x53\x1d\x3b\xc8\xeb\xa9\xac\xbf\x6f\xba\x77\xb0\x73\xf4\x53\xe4\x75\x01\x4b\x5f\xc8\x61\x60\x45\xfd\xb1\x74\xa9\x87\xdd\x16\xd3\x6e\xe5\x66\x30\xe9\x7a\x9c\x87\x74\x77\x0e\xfd\x53\x95\x32\x6e\x97\x4e\xba\x64\x80\x4e\x92\x8c\xbd\xba\xd0\x54\x7a\xf3\xbe\xe1\xd2\xa5\x46\xe4\x6c\xeb\xc5\x2c\x40\xc1\xb9\x9a\x91\x58\xe0\x45\xab\x20\x20\x2d\x5f\x3c\x5e\xed\x6d\xc4\x70\x60\xcc\x61\x16\xf9\x16\x4c\x1b\x8e\x8d\x6b\xd6\xce\xb5\x87\xc0\x96\x9b\x74\x7e\xe2\x43\xdc\xde\xb1\x5b\x2b\xaa\xa8\xf5\x0c\xb0\x88\xc0\x8b\xba\xef\x44\xed\x95\x0c\xfb\xab\x32\xee\xdb\x11\x5d\x00\xe8\x3d\xf5\x9c\x8f\x3b\xd1\xc7\x92\x55\x60\xea\x80\xa8\xeb\x7c\xed\xae\x27\x99\xd4\x3d\x2e\x98\x31\xcf\x4a\xe7\xfd\x8e\x77\x24\xa7\x48\x36\x95\x39\x76\xec\x58\x24\xbf\x9c\x2a\x71\x89\x80\xd1\xff\xac\x36\xf4\x13\xb6\xf0\x18\x10\x7e\xe4\x4a\xe0\x44\xab\x7f\x84\xf5\xc7\xdb\xe0\x2c\x96\x78\x2b\xf9\xeb\x27\x21\x71\x17\xf5\x6e\xe2\xb5\x4d\x4c\xc1\xf4\x2e\x57\xcf\x92\xd4\xb8\x1c\x22\x8a\x7f\xf9\xac\xb7\x68\xf0\xdd\x42\xe7\x1e\x3c\x53\x42\x28\x19\x3f\x3c\xe2\xf7\x91\xdb\x27\x49\x7a\x5f\xef\xfc\x1e\xf1\x88\xcb\x97\x53\xa6\x79\x5e\xda\x5b\xb2\xb5\xb6\x36\xb7\x69\x3a\xf8\x1c\xa9\x38\x17\x8d\xd4\x8a\xa7\x50\xa9\xb5\x92\xa6\xdc\xf3\x1b\xf4\xfc\x86\x63\x88\x6f\xba\x4f\x2c\xc7\x03\xb1\xed\x51\x14\x51\x24\xdb\x62\x4e\x9b\x09\xd1\x8d\x24\x4f\x1b\x75\xb3\x2e\x65\xce\x2c\x23\x14\x6e\x5b\x64\x58\x79\x02\xaf\xe8\x98\x38\x53\x63\xb8\x8d\x9d\x07\xf3\x01\x6c\x85\x1f\x3b\x3f\x90\xc8\xb1\x47\x17\x33\x68\xe4\xdb\x5f\x4c\xcb\xcb\xb6\x81\x65\x84\x57\x86\xb7\xcd\x1b\x69\x45\xef\xd3\xe0\x53\x2a\x08\x66\x23\x97\x7c\xeb\xb3\x75\x75\xd4\xda\x05\x01\x33\x34\x8e\x90\x26\x4a\xa8\xb3\x3e\xf6\x51\xbf\x70\x52\x27\xe5\x5c\xfd\x75\xf9\x47\xfd\xc3\x03\xb8\x4b\x60\xdd\x14\xc4\x7d\x1d\xd3\x0f\x4d\x51\x70\xed\x4a\x3f\x43\x85\x83\xa3\x39\x74\x97\x17\x13\x7c\xc0\xe3\x04\x6d\x51\xc0\xa9\xe8\xa7\x17\x9e\x35\x90\x42\xdf\x03\x1d\x74\xb5\xcc\xed\x79\x41\xe8\x3b\x94\xf6\x52\x47\x5a\x07\x59\x09\x7b\xd0\x65\x1b\xa3\xa4\xd3\xe2\x5b\x92\x5f\xfb\x16\xfe\x17\x00\x00\xff\xff\x01\x7e\x5e\xaf\x0a\x0c\x00\x00")

func mailGoBytes() ([]byte, error) {
	return bindataRead(
		_mailGo,
		"mail.go",
	)
}

func mailGo() (*asset, error) {
	bytes, err := mailGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mail.go", size: 3082, mode: os.FileMode(420), modTime: time.Unix(1472694171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mail_testGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\x41\x8b\xdb\x30\x10\x85\xcf\xd6\xaf\x10\x3a\x49\x65\x2b\x67\x97\x24\x94\x42\xa0\x4b\x9b\x63\x60\x69\x72\x2b\x3d\x68\xed\x71\xd6\xd4\x92\x5c\x69\x9c\xa6\x84\xfc\xf7\x4a\xb6\x9a\x38\x38\xb0\x97\x38\x23\xcd\x7c\xef\xcd\x33\x6e\x55\xf1\x4b\xed\x81\x6a\x55\x37\x84\xd4\xba\xb5\x0e\x29\x27\x19\xb3\x9e\x85\x5f\x04\x8f\xb5\xd9\x33\x12\xfe\xef\x6b\x7c\xeb\x5e\x65\x61\x75\x7e\xec\x7e\x87\xd3\x0a\xcc\x3e\x8f\x83\x5a\x99\x5c\x15\x85\xed\x0c\xb2\x77\x1b\xbd\xc6\x96\x11\x41\x48\xd5\x99\x82\xee\x82\xc0\x46\xd5\x86\x6b\xfa\x21\x89\xc9\x8d\xa0\xa7\x20\x98\x88\xf3\x38\x48\x3f\xaf\x68\xaa\xe5\xf3\xf0\x3c\x91\x2c\x63\x95\xb3\xfa\x0b\x1c\x95\x6e\x1b\x88\x82\xec\x21\x9e\xb6\xca\xfb\x3f\xd6\x95\xb1\x3a\x93\x2c\x2a\x5e\x28\xb1\x90\xdb\xcd\xee\x65\x0b\xee\x00\xae\xa7\x4c\x09\x7d\xd7\xe4\xf4\x69\x91\x88\xff\xad\x6c\xd5\x01\x92\x1d\x3e\xb6\x2b\x06\xd1\xfe\xfe\xaa\xc5\x2f\x46\xc2\xbd\x96\xdf\x3b\xc3\xc5\x95\xf5\x0d\x1a\xc0\xbb\x34\xb9\x1e\x33\x87\xbe\x7b\x54\xf9\x5c\x96\x0e\xbc\x0f\x9d\xd6\xcb\xf5\xb1\x46\x3e\x13\xe4\x3c\x4a\x7a\x0b\xa6\x0c\x69\x37\x1c\xaf\x69\xef\x86\xb4\xd3\xb2\x9b\x14\x53\x7c\xf6\xd9\xa4\xf3\x3e\x80\x1f\x3f\x3d\xba\x30\x73\x62\x68\x6f\x32\x3b\xdf\xdc\xf6\xd5\xfd\x57\x53\xa9\xc6\xc3\xc3\x88\x4b\x5f\x6d\xf9\x77\x48\xf7\x71\xbe\x7c\x5c\x2e\x16\xb3\x4f\xcb\xa7\xf9\x92\x4d\x88\x21\x76\x70\x2e\x7a\xbb\x6c\x31\xf2\x1c\x76\xae\x2b\x1a\x1b\x56\x2b\x6a\xc2\x0e\xd1\x3c\xca\xb5\x73\xd6\x71\x76\x99\x10\xd4\xbf\xd9\xae\x29\x69\x15\x2a\x26\x22\x75\x9c\xcf\x8b\x72\xbe\xc7\x7d\xb5\x06\x21\xbc\x86\x69\x4e\x79\xde\x7f\x2b\x1f\x11\x82\xb4\x42\xa0\xc6\x22\x85\x63\xed\x91\x64\xc5\x30\x15\x3d\x4e\x48\x8c\x0d\x16\x1b\x30\x3c\xf5\x89\xe8\x75\x76\xeb\x74\x32\x27\x6e\xac\xfe\x0b\x00\x00\xff\xff\xeb\x8d\x20\x67\xaf\x03\x00\x00")

func mail_testGoBytes() ([]byte, error) {
	return bindataRead(
		_mail_testGo,
		"mail_test.go",
	)
}

func mail_testGo() (*asset, error) {
	bytes, err := mail_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mail_test.go", size: 943, mode: os.FileMode(420), modTime: time.Unix(1479802015, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responsiveHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5b\x73\xe3\x34\x14\x7e\xcf\xaf\xd0\x9a\x61\x0a\x3b\x75\xec\xa4\x97\xb4\xb9\x94\x81\x65\x77\x96\x19\x0a\x3c\x14\x66\x78\x94\x2d\x25\x51\x6b\x59\x5e\x59\x4e\x52\x4a\xff\x3b\x47\xb2\x9d\x58\x8e\x93\x50\xa6\x10\x33\xb3\xea\x43\x6d\x1d\x5d\xce\xf9\xce\x35\xc7\xe3\x37\xae\x8b\x7e\x88\x23\x16\x53\x89\xbe\xcb\x58\x44\xd0\x6f\x54\xa6\x4c\xc4\xe8\xfc\xec\xca\x0f\x06\x83\xf3\x5e\x10\x0c\x2e\xae\xc9\x65\x18\x5c\x5f\x0f\x2e\xce\x2f\xa6\x67\x98\x90\x7e\x0f\x93\xf3\xab\xa9\xdf\xf3\x03\xe4\xba\x37\x9d\xf1\x9b\xef\x7f\x7e\x77\xf7\xfb\x2f\xef\xd1\x5c\xf1\x08\xde\xf5\x3f\x94\xaa\xc7\x88\x4e\x9c\xa9\x88\x95\x3b\xc5\x9c\x45\x8f\x43\x74\xf2\x91\x46\x0b\xaa\x58\x88\xd1\x4f\x34\xa3\x27\xa7\x95\x19\x78\x59\x3f\x9f\xa2\x6f\x25\xc3\xd1\x29\x4a\x71\x9c\xba\x29\x95\x6c\x3a\x42\xe6\xa4\x94\xfd\x41\x87\xa8\xe7\xfb\x5f\x8e\x90\x66\xdc\x9d\x53\x36\x9b\x2b\x98\xea\x5e\x52\x3e\x42\x1c\xcb\x19\x8b\x87\xc8\x1f\xa1\x04\x58\x65\xf1\x4c\x3f\x3b\x9a\x29\x8a\xc9\x4d\x07\xc1\x18\x73\xaa\x30\x0a\xe7\x58\xa6\x54\x4d\x9c\x4c\x4d\xdd\x2b\xa7\x4a\x8a\x31\x07\xce\x17\x8c\x2e\x13\x21\x95\x83\x42\xb8\x99\xc6\xb0\x74\xc9\x88\x9a\x4f\x08\x5d\xb0\x90\xba\xe6\xc5\xda\x37\x57\x2a\x71\xe9\xa7\x8c\x2d\x26\xce\xbb\x7c\x8f\x7b\xf7\x98\xd0\xca\x09\x8a\xae\x94\xa7\xf1\x19\xad\x19\xf8\xf5\xee\xc3\xe6\x7e\x83\x5a\xfe\xac\x87\xf7\x76\xc6\xd4\x3c\x0b\xde\x7a\x9d\xca\x5c\x98\xa5\x4a\x70\x98\x2b\xa7\x08\x5b\x74\x8b\x2b\xd0\xd3\x7a\x56\x8f\x57\x83\x7f\xfb\xd4\x8a\x2a\x2c\x62\x83\x5a\x2c\x3a\x61\x69\x12\x61\x60\x27\x88\x44\xf8\x60\xd3\x38\x5e\xe5\xb8\x36\x1d\xbc\xd6\x2d\xc2\x99\x12\x36\xad\xa2\xec\xf5\xfc\x73\xc7\x02\x28\x10\xe4\xb1\xfd\xe8\x98\xcd\xcb\x82\x1e\x0b\xc9\x71\xb4\x0b\x05\x1f\x8e\x4f\x56\x2f\xc2\x21\xc8\x94\x02\xf7\x6e\x17\x0a\x7d\x9b\x16\x8a\x48\xc8\x21\xfa\x62\x6a\x86\x4d\x0b\x84\x24\x54\xba\x12\x13\x96\xa5\xb0\xf3\xa2\x2e\xff\xda\xb8\x98\x89\x6b\x6e\x83\x8d\x85\x99\x4c\xf5\x05\x89\x60\xe0\x31\x72\x0f\xfc\x81\x88\x88\x4d\xd6\xee\xeb\x12\x1a\x0a\x89\x15\xc4\x49\xad\xa1\x98\xd6\x58\xc4\xe1\xc3\x4c\x8a\x2c\x26\x20\xc3\xd9\xf9\x15\x25\x78\x87\x02\x0f\x6b\xae\x22\x72\x89\x4a\xd3\x89\xc5\x12\x13\x3b\x86\x28\x15\x11\x23\x8d\x0b\xd6\x9e\x95\xac\x50\xdf\x32\x9d\x8a\x89\xe0\x96\x59\x47\x83\x8f\xec\xc3\xe2\x05\xe8\x56\x84\x66\x7c\xd6\xa5\x5c\xdc\xb3\x9a\xf0\x6b\x26\xea\x2c\x94\x50\xd6\xe7\x37\xde\xd9\xf5\x2f\x28\xd7\xff\xb7\xd6\x2c\xa8\xd4\x18\x45\x2e\x8e\xd8\x0c\xd6\xba\xbe\xbd\xe6\x39\x4f\x05\x5e\x25\x17\x8c\x15\x53\xf0\x7c\x8b\x59\xc4\x71\x8c\xfe\x44\x1f\xef\x6e\x7f\x44\xef\x39\xbc\xa3\x3b\xca\xc1\xe4\x15\x1d\x7b\xf9\xa2\x22\x91\x84\x92\x25\x0a\xa5\x32\x9c\x38\x9e\xa7\x96\x46\xba\x2e\xc4\xd7\x90\xc4\x90\x2b\xb8\xd7\xdf\x4c\xb2\xb8\x7b\x9f\x7e\xd3\xef\xf6\xba\x3d\xe7\x06\xee\x35\x5b\x21\x65\x7a\x79\xce\x1c\x9b\xc8\x19\xcc\x0c\xec\x13\x47\x3b\xa6\x53\x30\x7b\x9c\x24\x0f\x0e\x1a\x3c\x30\xb8\xd1\x2c\xe6\x42\xa8\xb9\xd1\x2d\x8e\x15\x1c\xc8\x70\x4a\xc9\x68\xa3\x3a\x73\x4c\xb9\xc5\x38\xb0\x3e\xdf\xc5\xe4\x1e\xd2\x68\xe1\xc1\xa8\x92\x74\xd0\x1b\xc6\x75\xde\x87\xd3\xf6\xd4\x13\x1d\x53\x3d\x19\x64\x4c\x0d\xa4\x70\x10\x51\x14\x46\x38\x4d\x27\x8e\x9e\x76\x97\x12\x27\x4e\x05\xb6\x0f\x66\x94\xc8\x1d\x09\xba\x42\xce\x4b\x4d\x2f\x65\x33\xd9\x74\x23\x9e\x89\x0c\x65\x3d\xa2\x64\xdb\x0a\xb9\xd2\x4b\xc6\x8a\xb4\x8c\x35\x70\x40\x62\xf3\x57\x98\x83\x2e\xcd\xb0\xae\xb2\xf7\x98\xc3\x11\x6d\x22\x8c\x28\x96\x3a\xdb\xa9\xb9\x65\xfb\x76\xa1\x66\x91\x6e\xed\x52\xac\x66\x3c\x45\xbe\x81\x0b\x20\xd1\x98\x74\x04\xd9\xdc\xd7\x7f\xc6\x73\xaa\x12\x1b\x2f\x2a\x4b\x57\xed\x48\x16\x11\xca\xb6\x2a\x86\xb0\xc6\xb1\x57\xe4\x40\x1b\xd7\x3b\xaa\x3f\xe5\x0b\x0e\xda\xac\xcd\x76\x6b\x5d\x6b\x9b\xd5\xb6\xb9\xda\x4e\x56\x0d\xbb\x58\xe7\x57\x3b\x1a\xeb\x93\x1e\x88\x58\xc6\xae\x7e\x3b\x70\x80\x1e\x4f\x4f\xdd\xe2\x27\xdc\xf3\xf3\xfe\xdb\xbc\xe2\xba\x3d\xf8\x59\x81\xa1\x46\x91\x0d\x16\xed\x19\x93\xae\x39\x83\x07\xde\x70\xb3\xed\x3c\x5e\xd5\x7b\x3a\xcd\x57\xb6\x4f\x81\x1b\xfe\x72\x08\xd6\x22\xe7\x32\x95\x79\xd5\xbc\x4d\x21\xc1\x53\xd9\x90\x66\x73\x42\x9e\x68\x8f\x9b\x56\x77\x85\xd0\xbf\x1f\x1e\x5a\x1c\x0e\xda\x6c\x3d\x25\x7f\x5b\x99\xf6\xff\x99\x57\x2b\xfd\x8f\x4b\x5f\xff\x4c\x6b\xac\x45\xeb\x49\xf7\x15\xd2\xea\x76\x74\x3a\x0e\x66\xb5\xe6\xd0\x16\x20\x87\x50\xd8\x0a\xa5\x9f\x8b\x83\xff\xa0\x38\x30\x3f\x64\xc1\x98\xa8\x6e\xa8\x34\xd8\xd2\xd1\xcd\xea\x9f\xd5\x11\xc9\xbf\xcb\x6d\x5f\x9b\x73\x63\xe0\x28\xfa\x1b\x97\x66\x8c\x1a\x7b\x82\xdb\x7d\xc0\x17\x48\xa6\xc7\x82\x61\xa8\x94\xd0\x5c\xd2\xe9\xc4\xd1\x9d\xeb\x74\xe8\x79\x79\xb7\xd9\xf4\x07\x56\xd9\x27\x38\x6c\x4a\xe3\x99\xc7\xf3\xb6\xc3\x7e\xc5\xb6\x42\xcf\x25\x72\xd7\x66\xec\xd6\x7b\x21\xd1\xa1\xc2\xee\x80\x7d\x78\xc9\xe7\x9a\xef\xf5\x6a\xbe\x6a\x99\x57\x74\xaf\xd4\x63\x42\x8b\x6f\x26\xf7\x78\x81\xf3\xd9\xc2\xb6\xcb\xee\x95\xe6\x06\x4d\xd0\xc9\xa0\xbf\x1a\xf4\x4f\x46\x16\x2d\xd1\x5f\x58\xbe\x22\x22\xcc\x38\xa0\x65\xbe\x00\x7c\x3d\xea\x54\x3b\x5c\x7a\xca\x74\xba\xcc\x97\xab\xbf\x02\x00\x00\xff\xff\xcb\xae\x08\x93\x12\x1b\x00\x00")

func responsiveHtmlBytes() ([]byte, error) {
	return bindataRead(
		_responsiveHtml,
		"responsive.html",
	)
}

func responsiveHtml() (*asset, error) {
	bytes, err := responsiveHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "responsive.html", size: 6930, mode: os.FileMode(420), modTime: time.Unix(1493968472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"attachment.go":      attachmentGo,
	"attachment_test.go": attachment_testGo,
	"bindata.go":         bindataGo,
	"mail.go":            mailGo,
	"mail_test.go":       mail_testGo,
	"responsive.html":    responsiveHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"attachment.go":      &bintree{attachmentGo, map[string]*bintree{}},
	"attachment_test.go": &bintree{attachment_testGo, map[string]*bintree{}},
	"bindata.go":         &bintree{bindataGo, map[string]*bintree{}},
	"mail.go":            &bintree{mailGo, map[string]*bintree{}},
	"mail_test.go":       &bintree{mail_testGo, map[string]*bintree{}},
	"responsive.html":    &bintree{responsiveHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
